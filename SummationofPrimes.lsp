(defun isprime(n)
(setq x 2)
(setq sqroot (floor (sqrt n)))
(if (= n 2)
    (return-from isprime 1)
 )
(if (= n 1)
    (return-from isprime 0)
    )
(loop 
(if (= (mod n x) 0)
		(return-from isprime 0)
	)
(incf x)
(when (> x sqroot) (return 1))
)
)
(setq y 3)
(setq sum 2)
(setq z 0)
(loop
 (if (= (isprime y) 1)
     (setq sum (+ sum y)
     ))
 (when (>= y 1999999) (return y))
 (incf z)
(setq y (+ y 2))
 )

(princ "Sum: ")
(write sum)
(terpri)
(princ "The total number of cycles to find that value is: ")
(write z)