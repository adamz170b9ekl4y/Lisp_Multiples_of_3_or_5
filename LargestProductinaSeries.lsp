(defun number-to-list (n)
    (loop for c across (write-to-string n) collect (digit-char-p c)))
	
(setq input 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450)
(setq output (number-to-list input))
(setq biggest 0)
(setq count 0)
(setq y 0)
(setq size (length output))
(setq size2 (- size 14))
(loop
    (setq test1 (nth count output))
    (setq test2 (nth (+ count 1) output))
    (setq test3 (nth (+ count 2) output))
    (setq test4 (nth (+ count 3) output))
    (setq test5 (nth (+ count 4) output))
    (setq test6 (nth (+ count 5) output))
    (setq test7 (nth (+ count 6) output))
    (setq test8 (nth (+ count 7) output))
    (setq test9 (nth (+ count 8) output))
    (setq test10 (nth (+ count 9) output))
    (setq test11 (nth (+ count 10) output))
    (setq test12 (nth (+ count 11) output))
    (setq test13 (nth (+ count 12) output)) 
 
    (setq product_t (* test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11 test12 test13))
    (if (> product_t biggest) (setq biggest product_t))
 (when (> y size2) (return y))
 (incf y)
 (incf count)
 )
(write biggest)